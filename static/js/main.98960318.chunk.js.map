{"version":3,"sources":["reducers/BookReducer.js","contexts/BookContext.js","components/NavBar.js","components/BookDetails.js","components/BookList.js","components/BookForm.js","App.js","serviceWorker.js","index.js"],"names":["BookReducer","state","action","type","title","book","author","id","v1","filter","BookContext","createContext","BookContextProvider","props","useReducer","localData","localStorage","getItem","JSON","parse","books","dispatch","useEffect","setItem","stringify","Provider","value","children","NavBar","useContext","className","length","BookDetails","onClick","BookList","map","key","BookForm","useState","setTitle","setAuthor","onSubmit","e","preventDefault","onChange","target","placeholder","required","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uMAEaA,EAAc,SAACC,EAAOC,GAC/B,OAAQA,EAAOC,MACX,IAAK,WACD,MAAM,GAAN,mBAAWF,GAAX,CAAkB,CACdG,MAAOF,EAAOG,KAAKD,MACnBE,OAAQJ,EAAOG,KAAKC,OACpBC,GAAIC,iBAEZ,IAAK,cACD,OAAOP,EAAMQ,QAAO,SAAAJ,GAAI,OAAIA,EAAKE,KAAOL,EAAOK,MACnD,QACI,OAAON,ICVNS,EAAcC,0BAmBZC,MAjBf,SAA6BC,GAAQ,IAAD,EACNC,qBAAWd,EAAa,IAAI,WAClD,IAAMe,EAAYC,aAAaC,QAAQ,SACvC,OAAOF,EAAYG,KAAKC,MAAMJ,GAAa,MAHf,mBACzBK,EADyB,KAClBC,EADkB,KAUhC,OAJAC,qBAAU,WACNN,aAAaO,QAAQ,QAASL,KAAKM,UAAUJ,MAC9C,CAACA,IAGA,kBAACV,EAAYe,SAAb,CAAsBC,MAAO,CAAEN,QAAOC,aACjCR,EAAMc,WCJJC,MAVf,WAAmB,IACPR,EAAUS,qBAAWnB,GAArBU,MACR,OACI,yBAAKU,UAAU,UACX,uDACA,iDAAuBV,EAAMW,OAA7B,IAAuD,IAAjBX,EAAMW,OAAe,OAAS,QAApE,wBCKGC,MAVf,YAAgC,IAAT3B,EAAQ,EAARA,KACXgB,EAAaQ,qBAAWnB,GAAxBW,SACR,OACI,wBAAIY,QAAS,WAAQZ,EAAS,CAAElB,KAAM,cAAeI,GAAIF,EAAKE,OAC1D,yBAAKuB,UAAU,SAASzB,EAAKD,OAC7B,yBAAK0B,UAAU,UAAUzB,EAAKC,UCU3B4B,MAdf,WAAqB,IACTd,EAAUS,qBAAWnB,GAArBU,MACR,OAAOA,EAAMW,OACT,yBAAKD,UAAU,aACX,4BACKV,EAAMe,KAAI,SAAA9B,GAAI,OAAI,kBAAC,EAAD,CAAaA,KAAMA,EAAM+B,IAAK/B,EAAKE,UAI1D,yBAAKuB,UAAU,SAAf,yCCSGO,MAnBf,WAAqB,IACThB,EAAaQ,qBAAWnB,GAAxBW,SADQ,EAEUiB,mBAAS,IAFnB,mBAETlC,EAFS,KAEFmC,EAFE,OAGYD,mBAAS,IAHrB,mBAGThC,EAHS,KAGDkC,EAHC,KAQhB,OACI,0BAAMC,SALW,SAACC,GAClBA,EAAEC,iBACFtB,EAAS,CAAElB,KAAM,WAAYE,KAAM,CAAED,QAAOE,cAIxC,2BAAOsC,SAAU,SAACF,GAAD,OAAOH,EAASG,EAAEG,OAAOnB,QAAQA,MAAOtB,EAAOD,KAAK,OAAO2C,YAAY,aACpFC,UAAQ,IACZ,2BAAOH,SAAU,SAACF,GAAD,OAAOF,EAAUE,EAAEG,OAAOnB,QAAQA,MAAOpB,EAAQH,KAAK,OAAO2C,YAAY,SACtFC,UAAQ,IACZ,2BAAO5C,KAAK,SAASuB,MAAM,eCCxBsB,MAZf,WACE,OACE,yBAAKlB,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCAYmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.98960318.chunk.js","sourcesContent":["import { v1 } from \"uuid\"\r\n\r\nexport const BookReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'ADD_BOOK':\r\n            return [...state, {\r\n                title: action.book.title,\r\n                author: action.book.author,\r\n                id: v1()\r\n            }]\r\n        case 'REMOVE_BOOK':\r\n            return state.filter(book => book.id !== action.id)\r\n        default:\r\n            return state\r\n    }\r\n}","import React, { createContext, useReducer, useEffect } from 'react'\r\nimport { BookReducer } from '../reducers/BookReducer';\r\n\r\nexport const BookContext = createContext();\r\n\r\nfunction BookContextProvider(props) {\r\n    const [books, dispatch] = useReducer(BookReducer, [], () => {\r\n        const localData = localStorage.getItem('books');\r\n        return localData ? JSON.parse(localData) : []\r\n    })\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('books', JSON.stringify(books))\r\n    }, [books])\r\n\r\n    return (\r\n        <BookContext.Provider value={{ books, dispatch }}>\r\n            {props.children}\r\n        </BookContext.Provider>\r\n    )\r\n}\r\n\r\nexport default BookContextProvider\r\n","import React, { useContext } from 'react'\r\nimport { BookContext } from '../contexts/BookContext'\r\n\r\nfunction NavBar() {\r\n    const { books } = useContext(BookContext);\r\n    return (\r\n        <div className='navbar'>\r\n            <h1>Prashant's Reading List</h1>\r\n            <p>Currently you have {books.length} {books.length === 1 ? 'book' : 'books'} to get through...</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NavBar\r\n","import React, { useContext } from 'react'\r\nimport { BookContext } from '../contexts/BookContext';\r\n\r\nfunction BookDetails({ book }) {\r\n    const { dispatch } = useContext(BookContext);\r\n    return (\r\n        <li onClick={() => { dispatch({ type: 'REMOVE_BOOK', id: book.id }) }}>\r\n            <div className='title'>{book.title}</div>\r\n            <div className='author'>{book.author}</div>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default BookDetails;\r\n","import React, { useContext } from 'react'\r\nimport { BookContext } from '../contexts/BookContext';\r\nimport BookDetails from './BookDetails';\r\n\r\nfunction BookList() {\r\n    const { books } = useContext(BookContext);\r\n    return books.length ? (\r\n        <div className='book-list'>\r\n            <ul>\r\n                {books.map(book => <BookDetails book={book} key={book.id} />)}\r\n            </ul>\r\n        </div>\r\n    ) : (\r\n            <div className='empty'>\r\n                No Books to read. Hello FREE TIME :)\r\n            </div>\r\n        )\r\n}\r\nexport default BookList;\r\n","import React, { useState, useContext } from 'react'\r\nimport { BookContext } from '../contexts/BookContext';\r\n\r\nfunction BookForm() {\r\n    const { dispatch } = useContext(BookContext)\r\n    const [title, setTitle] = useState('');\r\n    const [author, setAuthor] = useState('');\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        dispatch({ type: 'ADD_BOOK', book: { title, author } })\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input onChange={(e) => setTitle(e.target.value)} value={title} type='text' placeholder='book title'\r\n                required />\r\n            <input onChange={(e) => setAuthor(e.target.value)} value={author} type='text' placeholder='author'\r\n                required />\r\n            <input type='submit' value='add book' />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default BookForm\r\n","import React from 'react';\nimport NavBar from './components/NavBar';\nimport BookList from './components/BookList';\nimport BookForm from './components/BookForm';\nimport BookContextProvider from './contexts/BookContext';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BookContextProvider>\n        <NavBar />\n        <BookList />\n        <BookForm />\n      </BookContextProvider>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}